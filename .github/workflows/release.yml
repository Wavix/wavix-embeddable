name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file
        run: |
          cp .env.example .env
          sed -i -E "s/VITE_CONTROLLER_URI=.+/VITE_CONTROLLER_URI=wss:\/\/api.wavix.com\/webrtc-controller/" .env
          sed -i -E "s/VITE_WIDGET_URI=.+/VITE_WIDGET_URI=https:\/\/api.wavix.com\/webrtc/" .env

      - name: Build project
        run: pnpm build

      - name: Create archives
        run: |
          cd build
          zip -r ../wavix-embeddable-v${{ steps.version.outputs.VERSION }}.zip .
          tar -czf ../wavix-embeddable-v${{ steps.version.outputs.VERSION }}.tar.gz .
          cd ..

      - name: Create or Update Release
        run: |
          TAG="v${{ steps.version.outputs.VERSION }}"

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists, uploading files..."
            gh release upload "$TAG" \
              wavix-embeddable-v${{ steps.version.outputs.VERSION }}.zip \
              wavix-embeddable-v${{ steps.version.outputs.VERSION }}.tar.gz \
              --clobber
          else
            echo "Creating new release $TAG..."
            gh release create "$TAG" \
              wavix-embeddable-v${{ steps.version.outputs.VERSION }}.zip \
              wavix-embeddable-v${{ steps.version.outputs.VERSION }}.tar.gz \
              --title "Release v${{ steps.version.outputs.VERSION }}" \
              --notes "Wavix Embeddable v${{ steps.version.outputs.VERSION }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
