name: Test Build and Release

on:
  push:
    branches:
      - feature/add-release-workflow

  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run in test mode (no actual release)"
        required: false
        default: true
        type: boolean

jobs:
  test-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"
          echo "Current branch: ${{ github.ref_name }}"

      - name: Check environment
        run: |
          echo "=== Environment Check ==="
          echo "Node version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          pnpm install

      - name: Create .env file
        run: |
          if [ -f .env.example ]; then
            cp .env.example .env
          else
            echo "Creating .env file..."
            touch .env
          fi
          echo "VITE_CONTROLLER_URI=wss://api.wavix.com/webrtc-controller" >> .env
          echo "VITE_WIDGET_URI=https://api.wavix.com/webrtc" >> .env

      - name: Build project
        run: |
          echo "Building project..."
          pnpm build
          echo "Build complete. Contents:"
          ls -la build/

      - name: Create archives
        run: |
          cd build
          zip -r ../wavix-embeddable-v${{ steps.version.outputs.VERSION }}-TEST.zip .
          tar -czf ../wavix-embeddable-v${{ steps.version.outputs.VERSION }}-TEST.tar.gz .
          cd ..
          echo "Archives created:"
          ls -la *.zip *.tar.gz

      - name: Test Release (Dry Run)
        if: github.event_name == 'push' || inputs.test_mode == true
        run: |
          echo "=== TEST MODE ==="
          echo "Would create release: v${{ steps.version.outputs.VERSION }}"
          echo "Archives that would be uploaded:"
          ls -la wavix-embeddable-*.zip wavix-embeddable-*.tar.gz
          echo "File sizes:"
          du -h wavix-embeddable-*.zip wavix-embeddable-*.tar.gz
          echo "=== Release would be created successfully! ==="

      - name: Upload Test Artifacts
        if: github.event_name == 'push' || inputs.test_mode == true
        uses: actions/upload-artifact@v4
        with:
          name: test-build-${{ steps.version.outputs.VERSION }}
          path: |
            wavix-embeddable-*.zip
            wavix-embeddable-*.tar.gz
